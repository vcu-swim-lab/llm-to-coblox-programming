{"version":3,"sources":["generators/javascript/colour.js","generators/javascript/lists.js","generators/javascript/logic.js","generators/javascript/loops.js","generators/javascript/math.js","generators/javascript/procedures.js","generators/javascript/text.js","generators/javascript/variables.js","generators/javascript/javascript_generator.js","generators/javascript/variables_dynamic.js","generators/javascript.js"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","MEMBER","lists_isEmpty","LOGICAL_NOT","lists_indexOf","operator","item","workspace","options","oneBasedIndex","ADDITION","lists_getIndex","mode","where","list","listOrder","at","getAdjusted","Error","lists_setIndex","cacheList","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","value","ASSIGNMENT","SUBTRACTION","xVar","lists_getSublist","where1","where2","at1","at2","wherePascalCase","at1Param","at2Param","getSubstringIndex","lists_sort","direction","type","getCompareFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","indexVar","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","UNARY_NEGATION","math_arithmetic","tuple","MULTIPLICATION","DIVISION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","indexOf","text_join","codeAndOrder","forceString","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator","CodeGenerator","constructor","name","ORDER_OVERRIDES","isInitialized","key","addReservedWords","Object","getOwnPropertyNames","globalThis","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","definitions","values","scrubNakedValue","line","string","replace","split","map","lines","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","opt_delta","opt_negate","opt_order","delta","ORDER_NONE","defaultAtIndex","innerOrder","outerOrder","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_UNARY_NEGATION","floor","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","stringName","text_prompt","javascriptGenerator","assign","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"javascript_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.colour\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_('colourRandom', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green =\n      generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue =\n      generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_('colourRgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) ||\n      \"'#000000'\";\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) ||\n      \"'#000000'\";\n  const ratio =\n      generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_('colourBlend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.lists\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('listsRepeat', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`);\n  const element =\n      generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount =\n      generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return [list + '.length', Order.MEMBER];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const list =\n      generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName =\n          generator.provideFunction_('listsGetRandomItem', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName(\n          'tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = generator.getAdjusted(\n          block, 'AT', 1, false, Order.SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName(\n            'tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(\n            block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(\n            block, 'AT2', 0, false, Order.SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd',\n    };\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      generator.provideFunction_('listsGetSortCompare', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    Order.FUNCTION_CALL\n  ];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.logic\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) ||\n        'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(\n            generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      Order.EQUALITY :\n      Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? Order.LOGICAL_AND :\n                                      Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 =\n      generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) ||\n      'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) ||\n      'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) ||\n        '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName(\n          'repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL',\n          until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.getVariableName(\n        block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n      generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = generator.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = generator.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = generator.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) ||\n      '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = generator.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = generator.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = generator.INDENT + variable0 + ' = ' + listVar +\n      '[' + indexVar + '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(\n          generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.math\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? Order.ATOMIC :\n              Order.UNARY_NEGATION;\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [null, Order.NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM',\n        Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM',\n        Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', Order.MEMBER],\n    'E': ['Math.E', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\n    'INFINITY': ['Infinity', Order.ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': [' % 1 === 0', Order.MODULUS,\n        Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL,\n        Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n      generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) ||\n      '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('mathIsPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 = generator.valueToCode(block, 'DELTA',\n      Order.ADDITION) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = generator.valueToCode(block, 'LIST',\n          Order.MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMean', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_('mathMedian', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_('mathModes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName =\n          generator.provideFunction_('mathStandardDeviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('mathRandomList', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n      list = generator.valueToCode(block, 'LIST',\n          Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 = generator.valueToCode(block, 'DIVIDEND',\n      Order.MODULUS) || '0';\n  const argument1 = generator.valueToCode(block, 'DIVISOR',\n      Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW',\n      Order.NONE) || '0';\n  const argument2 = generator.valueToCode(block, 'HIGH',\n      Order.NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO',\n      Order.NONE) || '0';\n  const functionName = generator.provideFunction_('mathRandomInt', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Order.FUNCTION_CALL];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X',\n      Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y',\n      Order.NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      Order.DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.procedures\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(\n        generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(\n          generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] =\n        generator.getVariableName(variables[i]);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block),\n        generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.texts\n\nimport {Order} from './javascript_generator.js';\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code =\n      generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION :\n      Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = generator.valueToCode(block, 'ADD0',\n          Order.NONE) || \"''\";\n      const element1 = generator.valueToCode(block, 'ADD1',\n          Order.NONE) || \"''\";\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = generator.valueToCode(block, 'ADD' + i,\n            Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return [text + '.length', Order.MEMBER];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = generator.valueToCode(block, 'FIND',\n      Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE',\n      Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? Order.NONE :\n      Order.MEMBER;\n  const text =\n      generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName =\n          generator.provideFunction_('textRandomLetter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? Order.MEMBER :\n      Order.NONE;\n  const text =\n      generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false,\n            Order.SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false,\n            Order.SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\n  const text =\n      generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName =\n        generator.provideFunction_('textToTitleCase', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  return [text + operator, Order.FUNCTION_CALL];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB',\n      Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('textCount', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM',\n      Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = generator.provideFunction_('textReplace', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT',\n      Order.MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variables\n\nimport {Order} from './javascript_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(\n                        block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.JavaScript\n\nimport * as Variables from '../../core/variables.js';\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,            // 0 \"\" ...\n  NEW: 1.1,             // new\n  MEMBER: 1.2,          // . []\n  FUNCTION_CALL: 2,     // ()\n  INCREMENT: 3,         // ++\n  DECREMENT: 3,         // --\n  BITWISE_NOT: 4.1,     // ~\n  UNARY_PLUS: 4.2,      // +\n  UNARY_NEGATION: 4.3,  // -\n  LOGICAL_NOT: 4.4,     // !\n  TYPEOF: 4.5,          // typeof\n  VOID: 4.6,            // void\n  DELETE: 4.7,          // delete\n  AWAIT: 4.8,           // await\n  EXPONENTIATION: 5.0,  // **\n  MULTIPLICATION: 5.1,  // *\n  DIVISION: 5.2,        // /\n  MODULUS: 5.3,         // %\n  SUBTRACTION: 6.1,     // -\n  ADDITION: 6.2,        // +\n  BITWISE_SHIFT: 7,     // << >> >>>\n  RELATIONAL: 8,        // < <= > >=\n  IN: 8,                // in\n  INSTANCEOF: 8,        // instanceof\n  EQUALITY: 9,          // == != === !==\n  BITWISE_AND: 10,      // &\n  BITWISE_XOR: 11,      // ^\n  BITWISE_OR: 12,       // |\n  LOGICAL_AND: 13,      // &&\n  LOGICAL_OR: 14,       // ||\n  CONDITIONAL: 15,      // ?:\n  ASSIGNMENT: 16,       //: += -= **= *= /= %= <<= >>= ...\n  YIELD: 17,            // yield\n  COMMA: 18,            // ,\n  NONE: 99,             // (...)\n};\n\n/**\n * JavaScript code generator class.\n */\nexport class JavascriptGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'JavaScript');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n        'break,case,catch,class,const,continue,debugger,default,delete,do,' +\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\n        'while,with,yield,' +\n        'enum,' +\n        'implements,interface,let,package,private,protected,public,static,' +\n        'await,' +\n        'null,true,false,' +\n        // Magic variable.\n        'arguments,' +\n        // Everything in the current environment (835 items in Chrome,\n        // 104 in Node).\n        Object.getOwnPropertyNames(globalThis).join(',')\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped JavaScript string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline JavaScript string, complete\n   * with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} JavaScript string.\n   */\n  multiline_quote_(string) {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    const lines = string.split(/\\n/g).map(this.quote_);\n    return lines.join(' + \\'\\\\n\\' +\\n');\n  }\n\n  /**\n   * Common tasks for generating JavaScript from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The JavaScript code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} JavaScript code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '// ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    let innerOrder;\n    let outerOrder = order;\n    if (delta > 0) {\n      outerOrder = this.ORDER_ADDITION;\n      innerOrder = this.ORDER_ADDITION;\n    } else if (delta < 0) {\n      outerOrder = this.ORDER_SUBTRACTION;\n      innerOrder = this.ORDER_SUBTRACTION;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_NEGATION;\n      innerOrder = this.ORDER_UNARY_NEGATION;\n    }\n\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = Number(at) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\n\n\n// JavaScript is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.JavaScript.all\n\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\nimport * as colour from './javascript/colour.js';\nimport * as lists from './javascript/lists.js';\nimport * as logic from './javascript/logic.js';\nimport * as loops from './javascript/loops.js';\nimport * as math from './javascript/math.js';\nimport * as procedures from './javascript/procedures.js';\nimport * as text from './javascript/text.js';\nimport * as variables from './javascript/variables.js';\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\n\nexport * from './javascript/javascript_generator.js';\n\n/**\n * JavaScript code generator instance.\n * @type {!JavascriptGenerator}\n */\nexport const javascriptGenerator = new JavascriptGenerator();\n\n// Install per-block-type generator functions:\nObject.assign(\n  javascriptGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"]}