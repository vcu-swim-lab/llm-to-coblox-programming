{"version":3,"sources":["generators/php/colour.js","generators/php/lists.js","generators/php/logic.js","generators/php/loops.js","generators/php/math.js","generators/php/procedures.js","generators/php/text.js","generators/php/variables.js","generators/php/php_generator.js","generators/php/variables_dynamic.js","generators/php.js"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","list","lists_isEmpty","lists_indexOf","argument0","argument1","MEMBER","errorIndex","indexAdjustment","workspace","options","oneBasedIndex","lists_getIndex","mode","at","getAdjusted","SUBTRACTION","Error","lists_setIndex","where","value","ASSIGNMENT","cachedList","REFERENCE","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","length","isNumber","String","lists_sort","listCode","direction","type","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","EQUALITY","RELATIONAL","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","LOGICAL_NOT","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","Number","branch","addLoopTrap","loopVar","endVar","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","UNARY_NEGATION","Infinity","math_arithmetic","tuple","ADDITION","MULTIPLICATION","DIVISION","POWER","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","prefix","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","indexOf","push","devVarList","allDeveloperVariables","getName","DEVELOPER_VARIABLE","globalStr","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","STRING_CONCAT","text_join","element0","element1","elements","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","CLONE","NEW","INCREMENT","DECREMENT","BITWISE_NOT","CAST","SUPPRESS_ERROR","INSTANCEOF","UNARY_PLUS","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","LOGICAL_AND_WEAK","LOGICAL_XOR","LOGICAL_OR_WEAK","PhpGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","split","map","lines","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","opt_delta","opt_negate","opt_order","delta","ORDER_NONE","defaultAtIndex","outerOrder","innerOrder","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_UNARY_NEGATION","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","phpGenerator","assign","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"php_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for colour blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.colour\n\nimport {Order} from './php_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_('colour_random', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_('colour_rgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($r, $g, $b) {\n  $r = round(max(min($r, 100), 0) * 2.55);\n  $g = round(max(min($g, 100), 0) * 2.55);\n  $b = round(max(min($b, 100), 0) * 2.55);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const c1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_('colour_blend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($c1, $c2, $ratio) {\n  $ratio = max(min($ratio, 1), 0);\n  $r1 = hexdec(substr($c1, 1, 2));\n  $g1 = hexdec(substr($c1, 3, 2));\n  $b1 = hexdec(substr($c1, 5, 2));\n  $r2 = hexdec(substr($c2, 1, 2));\n  $g2 = hexdec(substr($c2, 3, 2));\n  $b2 = hexdec(substr($c2, 5, 2));\n  $r = round($r1 * (1 - $ratio) + $r2 * $ratio);\n  $g = round($g1 * (1 - $ratio) + $g2 * $ratio);\n  $b = round($b1 * (1 - $ratio) + $b2 * $ratio);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for list blocks.\n */\n\n/**\n * Lists in PHP are known to break when non-variables are passed into blocks\n * that require a list. PHP, unlike other languages, passes arrays as reference\n * value instead of value so we are unable to support it to the extent we can\n * for the other languages.\n * For example, a ternary operator with two arrays will return the array by\n * value and that cannot be passed into any of the built-in array functions for\n * PHP (because only variables can be passed by reference).\n * ex:  end(true ? list1 : list2)\n */\n\n// Former goog.module ID: Blockly.generator.lists\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './php_generator.js';\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['array()', Order.FUNCTION_CALL];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  let code = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    code[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  code = 'array(' + code.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('lists_repeat', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value, $count) {\n  $array = array();\n  for ($index = 0; $index < $count; $index++) {\n    $array[] = $value;\n  }\n  return $array;\n}\n`);\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const functionName = generator.provideFunction_('length', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\n  if (is_string($value)) {\n    return strlen($value);\n  } else {\n    return count($value);\n  }\n}\n`);\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return [functionName + '(' + list + ')', Order.FUNCTION_CALL];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.FUNCTION_CALL)\n      || 'array()';\n  return ['empty(' + argument0 + ')', Order.FUNCTION_CALL];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const argument0 = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const argument1 =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  let errorIndex = ' -1';\n  let indexAdjustment = '';\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    indexAdjustment = ' + 1';\n  }\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    // indexOf\n    functionName = generator.provideFunction_('indexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\n  for ($index = 0; $index < count($haystack); $index++) {\n    if ($haystack[$index] == $needle) return $index${indexAdjustment};\n  }\n  return ${errorIndex};\n}\n`);\n  } else {\n    // lastIndexOf\n    functionName = generator.provideFunction_('lastIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\n  $last = ${errorIndex};\n  for ($index = 0; $index < count($haystack); $index++) {\n    if ($haystack[$index] == $needle) $last = $index${indexAdjustment};\n  }\n  return $last;\n}\n`);\n  }\n\n  const code = functionName + '(' + argument1 + ', ' + argument0 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_shift(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_shift(' + list + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'end(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_pop(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_pop(' + list + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_splice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case 'FROM_END':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const at = generator.getAdjusted(block, 'AT', 1, true);\n        const code = 'array_slice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.SUBTRACTION);\n        const code = 'array_splice(' + list + ', count(' + list + ') - ' + at +\n            ', 1)[0]';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + ';\\n';\n        }\n      }\n      break;\n    case 'RANDOM': {\n      const list =\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n      if (mode === 'GET') {\n        const functionName =\n            generator.provideFunction_('lists_get_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\n  return $list[rand(0,count($list)-1)];\n}\n`);\n        const code = functionName + '(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const functionName =\n            generator.provideFunction_('lists_get_remove_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\n  $x = rand(0,count($list)-1);\n  unset($list[$x]);\n  return array_values($list);\n}\n`);\n        const code = functionName + '(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const functionName =\n            generator.provideFunction_('lists_remove_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\n  unset($list[rand(0,count($list)-1)]);\n}\n`);\n        return functionName + '(' + list + ');\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  let cachedList;\n  function cacheList() {\n    if (cachedList.match(/^\\$\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = listVar + ' = &' + cachedList + ';\\n';\n    cachedList = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n        return 'array_unshift(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    case 'LAST': {\n      const list =\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      if (mode === 'SET') {\n        const functionName =\n            generator.provideFunction_('lists_set_last_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $value) {\n  $list[count($list) - 1] = $value;\n}\n`);\n        return functionName + '(' + list + ', ' + value + ');\\n';\n      } else if (mode === 'INSERT') {\n        return 'array_push(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const list =\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      const at = generator.getAdjusted(block, 'AT', 1);\n      if (mode === 'SET') {\n        const functionName =\n            generator.provideFunction_('lists_set_from_end', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\n  $list[count($list) - $at] = $value;\n}\n`);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      } else if (mode === 'INSERT') {\n        const functionName =\n            generator.provideFunction_('lists_insert_from_end', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\n  return array_splice($list, count($list) - $at, 0, $value);\n}\n`);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      cachedList =\n          generator.valueToCode(block, 'LIST', Order.REFERENCE) || 'array()';\n      let code = cacheList();\n      const list = cachedList;\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += xVar + ' = rand(0, count(' + list + ')-1);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += 'array_splice(' + list + ', ' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list;\n  } else if (\n      list.match(/^\\$\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a simple value or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 =\n            generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = 'count(' + list + ') - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    let length;\n    switch (where2) {\n      case 'FROM_START':\n        at2 =\n            generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        length = at2 + ' - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        length += ' + 1';\n        break;\n      case 'FROM_END':\n        at2 =\n            generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        length = 'count(' + list + ') - ' + at2 + ' - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      case 'LAST':\n        length = 'count(' + list + ') - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = 'array_slice(' + list + ', ' + at1 + ', ' + length + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName =\n        generator.provideFunction_('lists_get_sublist', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $where1, $at1, $where2, $at2) {\n  if ($where1 == 'FROM_END') {\n    $at1 = count($list) - 1 - $at1;\n  } else if ($where1 == 'FIRST') {\n    $at1 = 0;\n  } else if ($where1 != 'FROM_START') {\n    throw new Exception('Unhandled option (lists_get_sublist).');\n  }\n  $length = 0;\n  if ($where2 == 'FROM_START') {\n    $length = $at2 - $at1 + 1;\n  } else if ($where2 == 'FROM_END') {\n    $length = count($list) - $at1 - $at2;\n  } else if ($where2 == 'LAST') {\n    $length = count($list) - $at1;\n  } else {\n    throw new Exception('Unhandled option (lists_get_sublist).');\n  }\n  return array_slice($list, $at1, $length);\n}\n`);\n    code = functionName + '(' + list + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const listCode =\n      generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const functionName = generator.provideFunction_('lists_sort', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $type, $direction) {\n  $sortCmpFuncs = array(\n    'NUMERIC' => 'strnatcasecmp',\n    'TEXT' => 'strcmp',\n    'IGNORE_CASE' => 'strcasecmp'\n  );\n  $sortCmp = $sortCmpFuncs[$type];\n  $list2 = $list;\n  usort($list2, $sortCmp);\n  if ($direction == -1) {\n    $list2 = array_reverse($list2);\n  }\n  return $list2;\n}\n`);\n  const sortCode =\n      functionName + '(' + listCode + ', \"' + type + '\", ' + direction + ')';\n  return [sortCode, Order.FUNCTION_CALL];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let value_input = generator.valueToCode(block, 'INPUT', Order.NONE);\n  const value_delim =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!value_input) {\n      value_input = \"''\";\n    }\n    functionName = 'explode';\n  } else if (mode === 'JOIN') {\n    if (!value_input) {\n      value_input = 'array()';\n    }\n    functionName = 'implode';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + value_delim + ', ' + value_input + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'array_reverse(' + list + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for logic blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.logic\n\nimport {Order} from './php_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ? Order.EQUALITY :\n                                                           Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order =\n      (operator === '&&') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for loop blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './php_generator.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n        generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n        generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n        generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_start', NameType.VARIABLE);\n      code += startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_end', NameType.VARIABLE);\n      code += endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  code +=\n      'foreach (' + argument0 + ' as ' + variable0 + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for math blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.math\n\nimport {Order} from './php_generator.js';\n\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;\n  if (code === Infinity) {\n    code = 'INF';\n  } else if (code === -Infinity) {\n    code = '-INF';\n  }\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [' ** ', Order.POWER],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'sin(' + arg + ' / 180 * pi())';\n      break;\n    case 'COS':\n      code = 'cos(' + arg + ' / 180 * pi())';\n      break;\n    case 'TAN':\n      code = 'tan(' + arg + ' / 180 * pi())';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'log(' + arg + ') / log(10)';\n      break;\n    case 'ASIN':\n      code = 'asin(' + arg + ') / pi() * 180';\n      break;\n    case 'ACOS':\n      code = 'acos(' + arg + ') / pi() * 180';\n      break;\n    case 'ATAN':\n      code = 'atan(' + arg + ') / pi() * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['M_PI', Order.ATOMIC],\n    'E': ['M_E', Order.ATOMIC],\n    'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['M_SQRT2', Order.ATOMIC],\n    'SQRT1_2': ['M_SQRT1_2', Order.ATOMIC],\n    'INFINITY': ['INF', Order.ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': ['', ' % 2 == 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': ['', ' % 2 == 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': ['is_int(', ')', Order.NONE, Order.FUNCTION_CALL],\n    'POSITIVE': ['', ' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': ['', ' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [prefix, suffix, inputOrder, outputOrder] =\n      PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('math_isPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if ($n == 2 || $n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 || $n % 3 == 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {\n    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MODULUS) || '0';\n    if (divisor === '0') {\n      return ['false', Order.ATOMIC];\n\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = prefix + numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' += ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'array_sum(' + list + ')';\n      break;\n    case 'MIN':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      const functionName = generator.provideFunction_('math_mean', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($myList) {\n  return array_sum($myList) / count($myList);\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      const functionName = generator.provideFunction_('math_median', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($arr) {\n  sort($arr,SORT_NUMERIC);\n  return (count($arr) % 2) ? $arr[floor(count($arr) / 2)] :\n      ($arr[floor(count($arr) / 2)] + $arr[floor(count($arr) / 2) - 1]) / 2;\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_('math_modes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($values) {\n  if (empty($values)) return array();\n  $counts = array_count_values($values);\n  arsort($counts); // Sort counts in descending order\n  $modes = array_keys($counts, current($counts), true);\n  return $modes;\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($numbers) {\n  $n = count($numbers);\n  if (!$n) return null;\n  $mean = array_sum($numbers) / count($numbers);\n  foreach($numbers as $key => $num) $devs[$key] = pow($num - $mean, 2);\n  return sqrt(array_sum($devs) / (count($devs) - 1));\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_('math_random_list', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\n  $x = rand(0, count($list)-1);\n  return $list[$x];\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\n  const code =\n      'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_('math_random_int', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($a, $b) {\n  if ($a > $b) {\n    return rand($b, $a);\n  }\n  return rand($a, $b);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['(float)rand()/(float)getrandmax()', Order.FUNCTION_CALL];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'atan2(' + argument1 + ', ' + argument0 + ') / pi() * 180',\n    Order.DIVISION\n  ];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.procedures\n\nimport * as Variables from '../../core/variables.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './php_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (const variable of usedVariables) {\n    const varName = variable.name;\n    // getVars returns parameter names, not ids, for procedure blocks\n    if (block.getVars().indexOf(varName) === -1) {\n      globals.push(generator.getVariableName(varName));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n        generator.nameDB_.getName(\n          devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n  const globalStr =\n      globals.length ?\n      generator.INDENT + 'global ' + globals.join(', ') + ';\\n' : '';\n\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      globalStr + xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code +=\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for text blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.texts\n\nimport {Order} from './php_generator.js';\n\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('.') !== -1 ? Order.STRING_CONCAT : Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  if (block.itemCount_ === 0) {\n    return [\"''\", Order.ATOMIC];\n  } else if (block.itemCount_ === 1) {\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n    const code = element;\n    return [code, Order.NONE];\n  } else if (block.itemCount_ === 2) {\n    const element0 =\n        generator.valueToCode(block, 'ADD0', Order.STRING_CONCAT) || \"''\";\n    const element1 =\n        generator.valueToCode(block, 'ADD1', Order.STRING_CONCAT) || \"''\";\n    const code = element0 + ' . ' + element1;\n    return [code, Order.STRING_CONCAT];\n  } else {\n    const elements = new Array(block.itemCount_);\n    for (let i = 0; i < block.itemCount_; i++) {\n      elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n    }\n    const code = 'implode(\\'\\', array(' + elements.join(',') + '))';\n    return [code, Order.FUNCTION_CALL];\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const value =\n      generator.valueToCode(block, 'TEXT', Order.ASSIGNMENT) || \"''\";\n  return varName + ' .= ' + value + ';\\n';\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const functionName = generator.provideFunction_('length', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\n  if (is_string($value)) {\n    return strlen($value);\n  }\n  return count($value);\n}\n`);\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return [functionName + '(' + text + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['empty(' + text + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'strpos' : 'strrpos';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let indexAdjustment = '';\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    indexAdjustment = ' + 1';\n  }\n  const functionName = generator.provideFunction_(\n      block.getFieldValue('END') === 'FIRST' ? 'text_indexOf' :\n                                               'text_lastIndexOf',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $search) {\n  $pos = ${operator}($text, $search);\n  return $pos === false ? ${errorIndex} : $pos${indexAdjustment};\n}\n`);\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? Order.NONE : Order.NONE;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = 'substr(' + text + ', 0, 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = 'substr(' + text + ', -1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      const code = 'substr(' + text + ', ' + at + ', 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = 'substr(' + text + ', ' + at + ', 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_('text_random_letter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text) {\n  return $text[rand(0, strlen($text) - 1)];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    const code = text;\n    return [code, Order.NONE];\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName = generator.provideFunction_('text_get_substring', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $where1, $at1, $where2, $at2) {\n  if ($where1 == 'FROM_END') {\n    $at1 = strlen($text) - 1 - $at1;\n  } else if ($where1 == 'FIRST') {\n    $at1 = 0;\n  } else if ($where1 != 'FROM_START') {\n    throw new Exception('Unhandled option (text_get_substring).');\n  }\n  $length = 0;\n  if ($where2 == 'FROM_START') {\n    $length = $at2 - $at1 + 1;\n  } else if ($where2 == 'FROM_END') {\n    $length = strlen($text) - $at1 - $at2;\n  } else if ($where2 == 'LAST') {\n    $length = strlen($text) - $at1;\n  } else {\n    throw new Exception('Unhandled option (text_get_substring).');\n  }\n  return substr($text, $at1, $length);\n}\n`);\n    const code = functionName + '(' + text + ', \\'' + where1 + '\\', ' + at1 +\n        ', \\'' + where2 + '\\', ' + at2 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  let code;\n  if (block.getFieldValue('CASE') === 'UPPERCASE') {\n    code = 'strtoupper(' + text + ')';\n  } else if (block.getFieldValue('CASE') === 'LOWERCASE') {\n    code = 'strtolower(' + text + ')';\n  } else if (block.getFieldValue('CASE') === 'TITLECASE') {\n    code = 'ucwords(strtolower(' + text + '))';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {'LEFT': 'ltrim', 'RIGHT': 'rtrim', 'BOTH': 'trim'};\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return [operator + '(' + text + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ');\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'readline(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'floatval(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = 'strlen(' + sub + ') === 0' +\n      ' ? strlen(' + text + ') + 1' +\n      ' : substr_count(' + text + ', ' + sub + ')';\n  return [code, Order.CONDITIONAL];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = 'str_replace(' + from + ', ' + to + ', ' + text + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'strrev(' + text + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for variable blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.variables\n\nimport {Order} from './php_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating PHP for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.PHP\n\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://php.net/manual/en/language.operators.precedence.php\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,             // 0 \"\" ...\n  CLONE: 1,              // clone\n  NEW: 1,                // new\n  MEMBER: 2.1,           // []\n  FUNCTION_CALL: 2.2,    // ()\n  POWER: 3,              // **\n  INCREMENT: 4,          // ++\n  DECREMENT: 4,          // --\n  BITWISE_NOT: 4,        // ~\n  CAST: 4,               // (int) (float) (string) (array) ...\n  SUPPRESS_ERROR: 4,     // @\n  INSTANCEOF: 5,         // instanceof\n  LOGICAL_NOT: 6,        // !\n  UNARY_PLUS: 7.1,       // +\n  UNARY_NEGATION: 7.2,   // -\n  MULTIPLICATION: 8.1,   // *\n  DIVISION: 8.2,         // /\n  MODULUS: 8.3,          // %\n  ADDITION: 9.1,         // +\n  SUBTRACTION: 9.2,      // -\n  STRING_CONCAT: 9.3,    // .\n  BITWISE_SHIFT: 10,     // << >>\n  RELATIONAL: 11,        // < <= > >=\n  EQUALITY: 12,          // == != === !== <> <=>\n  REFERENCE: 13,         // &\n  BITWISE_AND: 13,       // &\n  BITWISE_XOR: 14,       // ^\n  BITWISE_OR: 15,        // |\n  LOGICAL_AND: 16,       // &&\n  LOGICAL_OR: 17,        // ||\n  IF_NULL: 18,           // ??\n  CONDITIONAL: 19,       // ?:\n  ASSIGNMENT: 20,        // = += -= *= /= %= <<= >>= ...\n  LOGICAL_AND_WEAK: 21,  // and\n  LOGICAL_XOR: 22,       // xor\n  LOGICAL_OR_WEAK: 23,   // or\n  NONE: 99,              // (...)\n};\n\nexport class PhpGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar() -> foo().bar()\n    // (foo())[0] -> foo()[0]\n    [Order.MEMBER, Order.FUNCTION_CALL],\n    // (foo[0])[1] -> foo[0][1]\n    // (foo.bar).baz -> foo.bar.baz\n    [Order.MEMBER, Order.MEMBER],\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'PHP');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // http://php.net/manual/en/reserved.keywords.php\n      '__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,' +\n      'clone,const,continue,declare,default,die,do,echo,else,elseif,empty,' +\n      'enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,' +\n      'extends,final,for,foreach,function,global,goto,if,implements,include,' +\n      'include_once,instanceof,insteadof,interface,isset,list,namespace,new,' +\n      'or,print,private,protected,public,require,require_once,return,static,' +\n      'switch,throw,trait,try,unset,use,var,while,xor,' +\n      // http://php.net/manual/en/reserved.constants.php\n      'PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,' +\n      'PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,' +\n      'PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,' +\n      'PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,' +\n      'PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,' +\n      'PHP_SYSCONFDIR,PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,' +\n      'PHP_CONFIG_FILE_SCAN_DIR,PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,' +\n      'E_NOTICE,E_CORE_ERROR,E_CORE_WARNING,E_COMPILE_ERROR,' +\n      'E_COMPILE_WARNING,E_USER_ERROR,E_USER_WARNING,E_USER_NOTICE,' +\n      'E_DEPRECATED,E_USER_DEPRECATED,E_ALL,E_STRICT,' +\n      '__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,__FILE__,' +\n      '__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_, '$');\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    this.isInitialized = true;\n  };\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  };\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  };\n\n  /**\n   * Encode a string as a properly escaped PHP string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} PHP string.\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  };\n\n  /**\n   * Encode a string as a properly escaped multiline PHP string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} PHP string.\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // . \"\\n\" .\n    // Newline escaping only works in double-quoted strings.\n    return lines.join(' . \\\"\\\\n\\\" .\\n');\n  };\n\n  /**\n   * Common tasks for generating PHP from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The PHP code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} PHP code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment, '// ') + '\\n';\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  };\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    let defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    let outerOrder = order;\n    let innerOrder;\n    if (delta > 0) {\n      outerOrder = this.ORDER_ADDITION;\n      innerOrder = this.ORDER_ADDITION;\n    } else if (delta < 0) {\n      outerOrder = this.ORDER_SUBTRACTION;\n      innerOrder = this.ORDER_SUBTRACTION;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_NEGATION;\n      innerOrder = this.ORDER_UNARY_NEGATION;\n    }\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = Number(at) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.PHP.variablesDynamic\n\n\n// generator is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating PHP for\n *     blocks.  This is the entrypoint for php_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.PHP.all\n\nimport {PhpGenerator} from './php/php_generator.js';\nimport * as colour from './php/colour.js';\nimport * as lists from './php/lists.js';\nimport * as logic from './php/logic.js';\nimport * as loops from './php/loops.js';\nimport * as math from './php/math.js';\nimport * as procedures from './php/procedures.js';\nimport * as text from './php/text.js';\nimport * as variables from './php/variables.js';\nimport * as variablesDynamic from './php/variables_dynamic.js';\n\nexport * from './php/php_generator.js';\n\n/**\n * Php code generator instance.\n * @type {!PhpGenerator}\n */\nexport const phpGenerator = new PhpGenerator();\n\n// Install per-block-type generator functions:\nObject.assign(\n  phpGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"]}