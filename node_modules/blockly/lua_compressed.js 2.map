{"version":3,"sources":["generators/lua/colour.js","generators/lua/lists.js","generators/lua/logic.js","generators/lua/loops.js","generators/lua/math.js","generators/lua/procedures.js","generators/lua/text.js","generators/lua/variables.js","generators/lua/lua_generator.js","generators/lua/variables_dynamic.js","generators/lua.js"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","HIGH","colour_rgb","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","NONE","g","b","colour_blend","colour1","colour2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","UNARY","lists_isEmpty","RELATIONAL","lists_indexOf","item","list","lists_getIndex","mode","where","match","at","atOrder","ADDITIVE","getListIndex","listVar","nameDB_","getDistinctName","NameType","VARIABLE","toLowerCase","lists_setIndex","value","lists_getSublist","where1","where2","at1","at2","at1Param","at2Param","lists_sort","direction","type","lists_split","input","delimiter","Error","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","argument0","argument1","logic_operation","order","AND","OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","value_then","value_else","addContinueLabel","branch","indent","indexOf","CONTINUE_STATEMENT","controls_repeat_ext","repeats","getField","String","Number","isNumber","parseInt","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getVariableName","startVar","endVar","increment","incValue","Math","abs","step","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","math_arithmetic","tuple","MULTIPLICATIVE","EXPONENTIATION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","provideSum","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","CONCATENATION","text_join","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","start","text_getSubstring","at1Order","at2Order","end","text_changeCase","text_trim","LEFT","RIGHT","BOTH","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","LuaGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","workspace","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","split","map","lines","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","luaGenerator","assign","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"lua_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for colour blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.colour\n\nimport {Order} from './lua_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  const code = 'string.format(\"#%06x\", math.random(0, 2^24 - 1))';\n  return [code, Order.HIGH];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_('colour_rgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b)\n  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\n  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\n  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Order.HIGH];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_('colour_blend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio)\n  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\n  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\n  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\n  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\n  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\n  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\n  local ratio = math.min(1, math.max(0, ratio))\n  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\n  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\n  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const colour1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const colour2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\n  const code =\n      functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for list blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.lists\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './lua_generator.js';\n\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['{}', Order.HIGH];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '{' + elements.join(', ') + '}';\n  return [code, Order.HIGH];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('create_list_repeated', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(item, count)\n  local t = {}\n  for i = 1, count do\n    table.insert(t, item)\n  end\n  return t\nend\n  `);\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.HIGH];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  return ['#' + list, Order.UNARY];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  const code = '#' + list + ' == 0';\n  return [code, Order.RELATIONAL];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '{}';\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('first_index', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for k, v in ipairs(t) do\n    if v == elem then\n      return k\n    end\n  end\n  return 0\nend\n`);\n  } else {\n    functionName = generator.provideFunction_('last_index', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for i = #t, 1, -1 do\n    if t[i] == elem then\n      return i\n    end\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.HIGH];\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getListIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '1';\n  } else if (where === 'FROM_END') {\n    return '#' + listName + ' + 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return '#' + listName;\n  } else if (where === 'RANDOM') {\n    return 'math.random(#' + listName + ')';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const list = generator.valueToCode(block, 'VALUE', Order.HIGH) || '({})';\n\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (mode === 'REMOVE') {\n      // We can use multiple statements.\n      const atOrder =\n          (where === 'FROM_END') ? Order.ADDITIVE : Order.NONE;\n      let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n      const listVar =\n          generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n      at = getListIndex(listVar, where, at);\n      const code = listVar + ' = ' + list + '\\n' +\n          'table.remove(' + listVar + ', ' + at + ')\\n';\n      return code;\n    } else {\n      // We need to create a procedure to avoid reevaluating values.\n      const at = generator.valueToCode(block, 'AT', Order.NONE) || '1';\n      let functionName;\n      if (mode === 'GET') {\n        functionName = generator.provideFunction_(\n          'list_get_' + where.toLowerCase(), [\n          'function ' + generator.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                  ')'),\n          '  return t[' + getListIndex('t', where, 'at') + ']', 'end'\n        ]);\n      } else {  // `mode` === 'GET_REMOVE'\n        functionName =\n            generator.provideFunction_(\n              'list_remove_' + where.toLowerCase(), [\n              'function ' + generator.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n                  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n                  // we add it as a parameter.\n                  ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                      ')'),\n              '  return table.remove(t, ' + getListIndex('t', where, 'at') +\n                  ')',\n              'end'\n            ]);\n      }\n      const code = functionName + '(' + list +\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n          // pass it.\n          ((where === 'FROM_END' || where === 'FROM_START') ? ', ' + at : '') +\n          ')';\n      return [code, Order.HIGH];\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    const atOrder = (mode === 'GET' && where === 'FROM_END') ?\n        Order.ADDITIVE :\n        Order.NONE;\n    let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n    at = getListIndex(list, where, at);\n    if (mode === 'GET') {\n      const code = list + '[' + at + ']';\n      return [code, Order.HIGH];\n    } else {\n      const code = 'table.remove(' + list + ', ' + at + ')';\n      if (mode === 'GET_REMOVE') {\n        return [code, Order.HIGH];\n      } else {  // `mode` === 'REMOVE'\n        return code + '\\n';\n      }\n    }\n  }\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.HIGH) || '{}';\n  const mode = block.getFieldValue('MODE') || 'SET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const at = generator.valueToCode(block, 'AT', Order.ADDITIVE) || '1';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n\n  let code = '';\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    // We can use multiple statements.\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n  }\n  if (mode === 'SET') {\n    code += list + '[' + getListIndex(list, where, at) + '] = ' + value;\n  } else {  // `mode` === 'INSERT'\n    // LAST is a special case, because we want to insert\n    // *after* not *before*, the existing last element.\n    code += 'table.insert(' + list + ', ' +\n        (getListIndex(list, where, at) + (where === 'LAST' ? ' + 1' : '')) +\n        ', ' + value + ')';\n  }\n  return code + '\\n';\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const at1 = generator.valueToCode(block, 'AT1', Order.NONE) || '1';\n  const at2 = generator.valueToCode(block, 'AT2', Order.NONE) || '1';\n\n  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n  // we add it as a parameter.\n  const at1Param =\n      (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n  const at2Param =\n      (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n  const functionName = generator.provideFunction_(\n      'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(), `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(source${at1Param}${at2Param})\n  local t = {}\n  local start = ${getListIndex('source', where1, 'at1')}\n  local finish = ${getListIndex('source', where2, 'at2')}\n  for i = start, finish do\n    table.insert(t, source[i])\n  end\n  return t\nend\n`);\n  const code = functionName + '(' + list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n      ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n      ')';\n  return [code, Order.HIGH];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n\n  const functionName = generator.provideFunction_('list_sort', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, typev, direction)\n  local t = {}\n  for n,v in pairs(list) do table.insert(t, v) end\n  local compareFuncs = {\n    NUMERIC = function(a, b)\n      return (tonumber(tostring(a)) or 0)\n          < (tonumber(tostring(b)) or 0) end,\n    TEXT = function(a, b)\n      return tostring(a) < tostring(b) end,\n    IGNORE_CASE = function(a, b)\n      return string.lower(tostring(a)) < string.lower(tostring(b)) end\n  }\n  local compareTemp = compareFuncs[typev]\n  local compare = compareTemp\n  if direction == -1\n  then compare = function(a, b) return compareTemp(b, a) end\n  end\n  table.sort(t, compare)\n  return t\nend\n`);\n\n  const code =\n      functionName + '(' + list + ',\"' + type + '\", ' + direction + ')';\n  return [code, Order.HIGH];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.NONE);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = generator.provideFunction_('list_string_split', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input, delim)\n  local t = {}\n  local pos = 1\n  while true do\n    next_delim = string.find(input, delim, pos)\n    if next_delim == nil then\n      table.insert(t, string.sub(input, pos))\n      break\n    else\n      table.insert(t, string.sub(input, pos, next_delim-1))\n      pos = next_delim + #delim\n    end\n  end\n  return t\nend\n`);\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '{}';\n    }\n    functionName = 'table.concat';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + input + ', ' + delimiter + ')';\n  return [code, Order.HIGH];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const functionName = generator.provideFunction_('list_reverse', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input)\n  local reversed = {}\n  for i = #input, 1, -1 do\n    table.insert(reversed, input[i])\n  end\n  return reversed\nend\n`);\n  const code = functionName + '(' + list + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for logic blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.logic\n\nimport {Order} from './lua_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) + branchCode;\n    }\n    code +=\n        (n > 0 ? 'else' : '') + 'if ' + conditionCode + ' then\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += 'else\\n' + branchCode;\n  }\n  return code + 'end\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '~=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const argument0 =\n        generator.valueToCode(block, 'A', Order.RELATIONAL) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'B', Order.RELATIONAL) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Order.RELATIONAL];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? 'and' : 'or';\n  const order = (operator === 'and') ? Order.AND : Order.OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === 'and') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const argument0 =\n        generator.valueToCode(block, 'BOOL', Order.UNARY) || 'true';\n  const code = 'not ' + argument0;\n  return [code, Order.UNARY];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['nil', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if = generator.valueToCode(block, 'IF', Order.AND) || 'false';\n  const value_then =\n        generator.valueToCode(block, 'THEN', Order.AND) || 'nil';\n  const value_else = generator.valueToCode(block, 'ELSE', Order.OR) || 'nil';\n  const code = value_if + ' and ' + value_then + ' or ' + value_else;\n  return [code, Order.OR];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for loop blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './lua_generator.js';\n\n\n/**\n * This is the text used to implement a <pre>continue</pre>.\n * It is also used to recognise <pre>continue</pre>s in generated code so that\n * the appropriate label can be put at the end of the loop body.\n * @const {string}\n */\nconst CONTINUE_STATEMENT = 'goto continue\\n';\n\n/**\n * If the loop body contains a \"goto continue\" statement, add a continue label\n * to the loop body. Slightly inefficient, as continue labels will be generated\n * in all outer loops, but this is safer than duplicating the logic of\n * blockToCode.\n *\n * @param {string} branch Generated code of the loop body\n * @param {string} indent Whitespace by which to indent a continue statement.\n * @return {string} Generated label or '' if unnecessary\n */\nfunction addContinueLabel(branch, indent) {\n  if (branch.indexOf(CONTINUE_STATEMENT) !== -1) {\n    // False positives are possible (e.g. a string literal), but are harmless.\n    return branch + indent + '::continue::\\n';\n  } else {\n    return branch;\n  }\n};\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'math.floor(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const loopVar = generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  const code =\n      'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.UNARY : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const startVar = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const endVar = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  let code = '';\n  let incValue;\n  if (stringUtils.isNumber(startVar) && stringUtils.isNumber(endVar) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(startVar) <= Number(endVar);\n    const step = Math.abs(Number(increment));\n    incValue = (up ? '' : '-') + step;\n  } else {\n    code = '';\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    incValue =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += incValue + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + '\\n';\n    } else {\n      code += 'math.abs(' + increment + ')\\n';\n    }\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\n    code += generator.INDENT + incValue + ' = -' + incValue + '\\n';\n    code += 'end\\n';\n  }\n  code +=\n      'for ' + variable0 + ' = ' + startVar + ', ' + endVar + ', ' + incValue;\n  code += ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const code = 'for _, ' + variable0 + ' in ipairs(' + argument0 + ') do \\n' +\n      branch + 'end\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + CONTINUE_STATEMENT;\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for math blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.math\n\nimport {Order} from './lua_generator.js';\n\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code < 0 ? Order.UNARY : Order.ATOMIC;\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ^ ', Order.EXPONENTIATION],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY) || '0';\n    return ['-' + arg, Order.UNARY];\n  }\n  if (operator === 'POW10') {\n    arg = generator.valueToCode(block, 'NUM', Order.EXPONENTIATION) || '0';\n    return ['10 ^ ' + arg, Order.EXPONENTIATION];\n  }\n  if (operator === 'ROUND') {\n    arg = generator.valueToCode(block, 'NUM', Order.ADDITIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n\n  let code;\n  switch (operator) {\n    case 'ABS':\n      code = 'math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log(' + arg + ', 10)';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'ROUND':\n      // This rounds up.  Blockly does not specify rounding direction.\n      code = 'math.floor(' + arg + ' + .5)';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(math.rad(' + arg + '))';\n      break;\n    case 'COS':\n      code = 'math.cos(math.rad(' + arg + '))';\n      break;\n    case 'TAN':\n      code = 'math.tan(math.rad(' + arg + '))';\n      break;\n    case 'ASIN':\n      code = 'math.deg(math.asin(' + arg + '))';\n      break;\n    case 'ACOS':\n      code = 'math.deg(math.acos(' + arg + '))';\n      break;\n    case 'ATAN':\n      code = 'math.deg(math.atan(' + arg + '))';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.HIGH];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['math.pi', Order.HIGH],\n    'E': ['math.exp(1)', Order.HIGH],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.HIGH],\n    'SQRT1_2': ['math.sqrt(1 / 2)', Order.HIGH],\n    'INFINITY': ['math.huge', Order.HIGH],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.HIGH],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('math_isPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n)\n  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if n == 2 or n == 3 then\n    return true\n  end\n  -- False if n is NaN, negative, is 1, or not whole.\n  -- And false if n is divisible by 2 or 3.\n  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x = 6, math.sqrt(n) + 1.5, 6 do\n    if n % (x - 1) == 0 or n % (x + 1) == 0 then\n      return false\n    end\n  end\n  return true\nend\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will produce a nan.\n    // Let's produce nil if we can determine this at compile-time.\n    if (divisor === '0') {\n      return ['nil', Order.ATOMIC];\n    }\n    // The normal trick to implement ?: with and/or doesn't work here:\n    //   divisor == 0 and nil or number_to_check % divisor == 0\n    // because nil is false, so allow a runtime failure. :-(\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let functionName;\n\n  // Functions needed in more than one case.\n  function provideSum() {\n    return generator.provideFunction_('math_sum', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local result = 0\n  for _, v in ipairs(t) do\n    result = result + v\n  end\n  return result\nend\n`);\n  }\n\n  switch (func) {\n    case 'SUM':\n      functionName = provideSum();\n      break;\n\n    case 'MIN':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_min', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = math.huge\n  for _, v in ipairs(t) do\n    if v < result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'AVERAGE':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_average', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  return ${provideSum()}(t) / #t\nend\n`);\n      break;\n\n    case 'MAX':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_max', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = -math.huge\n  for _, v in ipairs(t) do\n    if v > result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'MEDIAN':\n      // This operation excludes non-numbers.\n      functionName = generator.provideFunction_('math_median', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  if #t == 0 then\n    return 0\n  end\n  local temp = {}\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      table.insert(temp, v)\n    end\n  end\n  table.sort(temp)\n  if #temp % 2 == 0 then\n    return (temp[#temp / 2] + temp[(#temp / 2) + 1]) / 2\n  else\n    return temp[math.ceil(#temp / 2)]\n  end\nend\n`);\n      break;\n\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // The generator version includes non-numbers.\n      functionName = generator.provideFunction_('math_modes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  local counts = {}\n  for _, v in ipairs(t) do\n    if counts[v] == nil then\n      counts[v] = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  local biggestCount = 0\n  for _, v  in pairs(counts) do\n    if v > biggestCount then\n      biggestCount = v\n    end\n  end\n  local temp = {}\n  for k, v in pairs(counts) do\n    if v == biggestCount then\n      table.insert(temp, k)\n    end\n  end\n  return temp\nend\n`);\n      break;\n\n    case 'STD_DEV':\n      functionName = generator.provideFunction_('math_standard_deviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local m\n  local vm\n  local total = 0\n  local count = 0\n  local result\n  m = #t == 0 and 0 or ${provideSum()}(t) / #t\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      vm = v - m\n      total = total + (vm * vm)\n      count = count + 1\n    end\n  end\n  result = math.sqrt(total / (count-1))\n  return result\nend\n`);\n      break;\n\n    case 'RANDOM':\n      functionName = generator.provideFunction_('math_random_list', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return nil\n  end\n  return t[math.random(#t)]\nend\n`);\n      break;\n\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [functionName + '(' + list + ')', Order.HIGH];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'LOW', Order.NONE) || '-math.huge';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'math.huge';\n  const code = 'math.min(math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.HIGH];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'math.random(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.HIGH];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['math.random()', Order.HIGH];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))', Order.HIGH\n  ];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.procedures\n\nimport {Order} from './lua_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(\n          generator.INFINITE_LOOP_TRAP, block), generator.INDENT);\n  }\n  let branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = '';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ')\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + 'end\\n';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'nil';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.HIGH];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + '\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if ' + condition + ' then\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code +=\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'nil';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  code += 'end\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for text blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.texts\n\nimport {Order} from './lua_generator.js';\n\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('..') !== -1 ? Order.CONCATENATION : Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  if (block.itemCount_ === 0) {\n    return [\"''\", Order.ATOMIC];\n  } else if (block.itemCount_ === 1) {\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n    const code = 'tostring(' + element + ')';\n    return [code, Order.HIGH];\n  } else if (block.itemCount_ === 2) {\n    const element0 =\n        generator.valueToCode(block, 'ADD0', Order.CONCATENATION) || \"''\";\n    const element1 =\n        generator.valueToCode(block, 'ADD1', Order.CONCATENATION) || \"''\";\n    const code = element0 + ' .. ' + element1;\n    return [code, Order.CONCATENATION];\n  } else {\n    const elements = [];\n    for (let i = 0; i < block.itemCount_; i++) {\n      elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n    }\n    const code = 'table.concat({' + elements.join(', ') + '})';\n    return [code, Order.HIGH];\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const value =\n      generator.valueToCode(block, 'TEXT', Order.CONCATENATION) || \"''\";\n  return varName + ' = ' + varName + ' .. ' + value + '\\n';\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text, Order.UNARY];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text + ' == 0', Order.RELATIONAL];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('firstIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(str, substr, 1, true)\n  if i == nil then\n    return 0\n  end\n  return i\nend\n`);\n  } else {\n    functionName = generator.provideFunction_('lastIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\n  if i then\n    return #str + 2 - i - #substr\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Order.HIGH];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const atOrder = (where === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at = generator.valueToCode(block, 'AT', atOrder) || '1';\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let code;\n  if (where === 'RANDOM') {\n    const functionName = generator.provideFunction_('text_random_letter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local index = math.random(string.len(str))\n  return string.sub(str, index, index)\nend\n`);\n    code = functionName + '(' + text + ')';\n  } else {\n    let start;\n    if (where === 'FIRST') {\n      start = '1';\n    } else if (where === 'LAST') {\n      start = '-1';\n    } else {\n      if (where === 'FROM_START') {\n        start = at;\n      } else if (where === 'FROM_END') {\n        start = '-' + at;\n      } else {\n        throw Error('Unhandled option (text_charAt).');\n      }\n    }\n    if (start.match(/^-?\\w*$/)) {\n      code = 'string.sub(' + text + ', ' + start + ', ' + start + ')';\n    } else {\n      // use function to avoid reevaluation\n      const functionName = generator.provideFunction_('text_char_at', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, index)\n  return string.sub(str, index, index)\nend\n`);\n      code = functionName + '(' + text + ', ' + start + ')';\n    }\n  }\n  return [code, Order.HIGH];\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\n\n  // Get start index.\n  const where1 = block.getFieldValue('WHERE1');\n  const at1Order = (where1 === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at1 = generator.valueToCode(block, 'AT1', at1Order) || '1';\n  let start;\n  if (where1 === 'FIRST') {\n    start = 1;\n  } else if (where1 === 'FROM_START') {\n    start = at1;\n  } else if (where1 === 'FROM_END') {\n    start = '-' + at1;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  // Get end index.\n  const where2 = block.getFieldValue('WHERE2');\n  const at2Order = (where2 === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at2 = generator.valueToCode(block, 'AT2', at2Order) || '1';\n  let end;\n  if (where2 === 'LAST') {\n    end = -1;\n  } else if (where2 === 'FROM_START') {\n    end = at2;\n  } else if (where2 === 'FROM_END') {\n    end = '-' + at2;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = 'string.sub(' + text + ', ' + start + ', ' + end + ')';\n  return [code, Order.HIGH];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const operator = block.getFieldValue('CASE');\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  let functionName;\n  if (operator === 'UPPERCASE') {\n    functionName = 'string.upper';\n  } else if (operator === 'LOWERCASE') {\n    functionName = 'string.lower';\n  } else if (operator === 'TITLECASE') {\n    // There are shorter versions at\n    // http://lua-users.org/wiki/SciteTitleCase\n    // that do not preserve whitespace.\n    functionName = generator.provideFunction_('text_titlecase', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local buf = {}\n  local inWord = false\n  for i = 1, #str do\n    local c = string.sub(str, i, i)\n    if inWord then\n      table.insert(buf, string.lower(c))\n      if string.find(c, \"%s\") then\n        inWord = false\n      end\n    else\n      table.insert(buf, string.upper(c))\n      inWord = true\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  }\n  const code = functionName + '(' + text + ')';\n  return [code, Order.HIGH];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {LEFT: '^%s*(,-)', RIGHT: '(.-)%s*$', BOTH: '^%s*(.-)%s*$'};\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.gsub(' + text + ', \"' + operator + '\", \"%1\")';\n  return [code, Order.HIGH];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n\n  const functionName = generator.provideFunction_('text_prompt', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg)\n  io.write(msg)\n  io.flush()\n  return io.read()\nend\n`);\n  let code = functionName + '(' + msg + ')';\n\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'tonumber(' + code + ', 10)';\n  }\n  return [code, Order.HIGH];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('text_count', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle)\n  if #needle == 0 then\n    return #haystack + 1\n  end\n  local i = 1\n  local count = 0\n  while true do\n    i = string.find(haystack, needle, i, true)\n    if i == nil then\n      break\n    end\n    count = count + 1\n    i = i + #needle\n  end\n  return count\nend\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.HIGH];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('text_replace', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement)\n  local buf = {}\n  local i = 1\n  while i <= #haystack do\n    if string.sub(haystack, i, i + #needle - 1) == needle then\n      for j = 1, #replacement do\n        table.insert(buf, string.sub(replacement, j, j))\n      end\n      i = i + #needle\n    else\n      table.insert(buf, string.sub(haystack, i, i))\n      i = i + 1\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.HIGH];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.reverse(' + text + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for variable blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.variables\n\nimport {Order} from './lua_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Lua for blocks.\n * Based on Ellen Spertus's blocky-lua project.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.Lua\n\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,    // literals\n  // The next level was not explicit in documentation and inferred by Ellen.\n  HIGH: 1,            // Function calls, tables[]\n  EXPONENTIATION: 2,  // ^\n  UNARY: 3,           // not # - ~\n  MULTIPLICATIVE: 4,  // * / %\n  ADDITIVE: 5,        // + -\n  CONCATENATION: 6,   // ..\n  RELATIONAL: 7,      // < > <=  >= ~= ==\n  AND: 8,             // and\n  OR: 9,              // or\n  NONE: 99,\n};\n\n/**\n * Lua code generator class.\n *\n * Note: Lua is not supporting zero-indexing since the language itself is\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\n * option used for lists and text.\n */\nexport class LuaGenerator extends CodeGenerator {\n  constructor(name) {\n    super(name ?? 'Lua');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // Special character\n      '_,' +\n      // From theoriginalbit's script:\n      // https://github.com/espertus/blockly-lua/issues/6\n      '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\n      'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\n      'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\n      'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\n      'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\n      'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\n      // Not included in the script, probably because it wasn't enabled:\n      'HTTP,' +\n      // Keywords (http://www.lua.org/pil/1.3.html).\n      'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,' +\n      'or,repeat,return,then,true,until,while,' +\n      // Metamethods (http://www.lua.org/manual/5.2/manual.html).\n      'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\n      // Basic functions (http://www.lua.org/manual/5.2/manual.html,\n      // section 6.1).\n      'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\n      'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\n      'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\n      // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\n      'require,package,string,table,math,bit32,io,file,os,debug'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    // Call Blockly.CodeGenerator's init.\n    super.init();\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    this.isInitialized = true;\n  };\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  };\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything. In Lua, an expression is not a legal statement, so we must assign\n   * the value to the (conventionally ignored) _.\n   * http://lua-users.org/wiki/ExpressionsAsStatements\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return 'local _ = ' + line + '\\n';\n  };\n\n  /**\n   * Encode a string as a properly escaped Lua string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Lua string.\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  };\n\n  /**\n   * Encode a string as a properly escaped multiline Lua string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Lua string.\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // .. '\\n' ..\n    return lines.join(' .. \\'\\\\n\\' ..\\n');\n  };\n\n  /**\n   * Common tasks for generating Lua from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Lua code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n   * @return {string} Lua code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment, '-- ') + '\\n';\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '-- ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.variablesDynamic\n\n\n// Lua is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Lua for\n *     blocks.  This is the entrypoint for lua_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.Lua.all\n\nimport {LuaGenerator} from './lua/lua_generator.js';\nimport * as colour from './lua/colour.js';\nimport * as lists from './lua/lists.js';\nimport * as logic from './lua/logic.js';\nimport * as loops from './lua/loops.js';\nimport * as math from './lua/math.js';\nimport * as procedures from './lua/procedures.js';\nimport * as text from './lua/text.js';\nimport * as variables from './lua/variables.js';\nimport * as variablesDynamic from './lua/variables_dynamic.js';\n\nexport * from './lua/lua_generator.js';\n\n/**\n * Lua code generator instance.\n * @type {!LuaGenerator}\n */\nexport const luaGenerator = new LuaGenerator();\n\n// Install per-block-type generator functions:\nObject.assign(\n  luaGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"]}