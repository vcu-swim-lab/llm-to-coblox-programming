{"version":3,"sources":["generators/dart/colour.js","generators/dart/lists.js","generators/dart/logic.js","generators/dart/loops.js","generators/dart/math.js","generators/dart/procedures.js","generators/dart/text.js","generators/dart/variables.js","generators/dart/dart_generator.js","generators/dart/variables_dynamic.js","generators/dart.js"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","definitions_","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","UNARY_POSTFIX","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","lists_length","lists_isEmpty","lists_indexOf","operator","item","workspace","options","oneBasedIndex","ADDITIVE","lists_getIndex","cacheList","listVar","nameDB_","getDistinctName","NameType","VARIABLE","list","mode","where","listOrder","match","at","getAdjusted","xVar","Error","lists_setIndex","value","ASSIGNMENT","lists_getSublist","where1","where2","at1","at2","lists_sort","direction","type","sortFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","UNARY_PREFIX","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","Infinity","math_arithmetic","tuple","MULTIPLICATIVE","math_single","arg","substring","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","returnType","args","variables","getVars","length","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","indexOf","text_join","text_append","text_length","text_isEmpty","text_indexOf","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","CASCADE","DartGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","split","map","lines","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","getProcedureDef","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","opt_delta","opt_negate","opt_order","delta","ORDER_NONE","defaultAtIndex","outerOrder","innerOrder","ORDER_ADDITIVE","ORDER_UNARY_PREFIX","parseInt","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","dartGenerator","Object","assign","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"dart_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for colour blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.colour\n\nimport {Order} from './dart_generator.js';\n\n\n// RESERVED WORDS: 'Math'\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_random', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  String hex = '0123456789abcdef';\n  var rnd = new Math.Random();\n  return '#\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}';\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_rgb', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(num r, num g, num b) {\n  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();\n  String rs = rn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();\n  String gs = gn.toInt().toRadixString(16);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();\n  String bs = bn.toInt().toRadixString(16);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const c1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio =\n      generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_blend', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String c1, String c2, num ratio) {\n  ratio = Math.max(Math.min(ratio, 1), 0);\n  int r1 = int.parse('0x\\${c1.substring(1, 3)}');\n  int g1 = int.parse('0x\\${c1.substring(3, 5)}');\n  int b1 = int.parse('0x\\${c1.substring(5, 7)}');\n  int r2 = int.parse('0x\\${c2.substring(1, 3)}');\n  int g2 = int.parse('0x\\${c2.substring(3, 5)}');\n  int b2 = int.parse('0x\\${c2.substring(5, 7)}');\n  num rn = (r1 * (1 - ratio) + r2 * ratio).round();\n  String rs = rn.toInt().toRadixString(16);\n  num gn = (g1 * (1 - ratio) + g2 * ratio).round();\n  String gs = gn.toInt().toRadixString(16);\n  num bn = (b1 * (1 - ratio) + b2 * ratio).round();\n  String bs = bn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for list blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.lists\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './dart_generator.js';\n\n\n// RESERVED WORDS: 'Math'\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const element =\n      generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount =\n      generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = 'new List.filled(' + repeatCount + ', ' + element + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  return [list + '.length', Order.UNARY_POSTFIX];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  return [list + '.isEmpty', Order.UNARY_POSTFIX];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = (where === 'RANDOM' || where === 'FROM_END') ?\n      Order.NONE :\n      Order.UNARY_POSTFIX;\n  let list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  // If `list` would be evaluated more than once (which is the case for\n  // RANDOM REMOVE and FROM_END) and is non-trivial, make sure to access it\n  // only once.\n  if (((where === 'RANDOM' && mode === 'REMOVE') || where === 'FROM_END') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (where === 'RANDOM') {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // We can use multiple statements.\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n          '.length);\\n';\n      code += list + '.removeAt(' + xVar + ');\\n';\n      return code;\n    } else {  // where === 'FROM_END'\n      if (mode === 'REMOVE') {\n        // We can use multiple statements.\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n        let code = cacheList();\n        code += list + '.removeAt(' + list + '.length' +\n            ' - ' + at + ');\\n';\n        return code;\n\n      } else if (mode === 'GET') {\n        const at = generator.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        const functionName = generator.provideFunction_('lists_get_from_end', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\n  x = my_list.length - x;\n  return my_list[x];\n}\n`);\n        const code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Order.UNARY_POSTFIX];\n      } else if (mode === 'GET_REMOVE') {\n        const at = generator.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        const functionName =\n            generator.provideFunction_('lists_remove_from_end', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\n  x = my_list.length - x;\n  return my_list.removeAt(x);\n}\n`);\n        const code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Order.UNARY_POSTFIX];\n      }\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    switch (where) {\n      case 'FIRST':\n        if (mode === 'GET') {\n          const code = list + '.first';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeAt(0)';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeAt(0);\\n';\n        }\n        break;\n      case 'LAST':\n        if (mode === 'GET') {\n          const code = list + '.last';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeLast()';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeLast();\\n';\n        }\n        break;\n      case 'FROM_START': {\n        const at = generator.getAdjusted(block, 'AT');\n        if (mode === 'GET') {\n          const code = list + '[' + at + ']';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeAt(' + at + ')';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeAt(' + at + ');\\n';\n        }\n        break;\n      }\n      case 'FROM_END': {\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n        if (mode === 'GET') {\n          const code = list + '[' + list + '.length - ' + at + ']';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\n          const code = list + '.removeAt(' + list + '.length - ' + at + ')';\n          if (mode === 'GET_REMOVE') {\n            return [code, Order.UNARY_POSTFIX];\n          } else if (mode === 'REMOVE') {\n            return code + ';\\n';\n          }\n        }\n        break;\n      }\n      case 'RANDOM':\n        generator.definitions_['import_dart_math'] =\n            'import \\'dart:math\\' as Math;';\n        if (mode === 'REMOVE') {\n          // We can use multiple statements.\n          const xVar =\n              generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n          let code = 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n              '.length);\\n';\n          code += list + '.removeAt(' + xVar + ');\\n';\n          return code;\n        } else if (mode === 'GET') {\n          const functionName =\n              generator.provideFunction_('lists_get_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\n  int x = new Math.Random().nextInt(my_list.length);\n  return my_list[x];\n}\n`);\n          const code = functionName + '(' + list + ')';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const functionName =\n              generator.provideFunction_('lists_remove_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\n  int x = new Math.Random().nextInt(my_list.length);\n  return my_list.removeAt(x);\n}\n`);\n          const code = functionName + '(' + list + ')';\n          return [code, Order.UNARY_POSTFIX];\n        }\n        break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  let list =\n      generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.add(' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at =\n          generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + list + '.length - ' + at + ', ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a is a variable or doesn't require a call for length,\n    // don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        // There is no second index if LAST option is chosen.\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    if (where2 === 'LAST') {\n      code = list + '.sublist(' + at1 + ')';\n    } else {\n      code = list + '.sublist(' + at1 + ', ' + at2 + ')';\n    }\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName = generator.provideFunction_('lists_get_sublist', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String where1, num at1, String where2, num at2) {\n  int getAt(String where, num at) {\n    if (where == 'FROM_END') {\n      at = list.length - 1 - at;\n    } else if (where == 'FIRST') {\n      at = 0;\n    } else if (where == 'LAST') {\n      at = list.length - 1;\n    } else if (where != 'FROM_START') {\n      throw 'Unhandled option (lists_getSublist).';\n    }\n    return at;\n  }\n  at1 = getAt(where1, at1);\n  at2 = getAt(where2, at2) + 1;\n  return list.sublist(at1, at2);\n}\n`);\n    code = functionName + '(' + list + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const sortFunctionName = generator.provideFunction_('lists_sort', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String type, int direction) {\n  var compareFuncs = {\n    'NUMERIC': (a, b) => (direction * a.compareTo(b)).toInt(),\n    'TEXT': (a, b) => direction * a.toString().compareTo(b.toString()),\n    'IGNORE_CASE':\n      (a, b) => direction *\n      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())\n  };\n  list = new List.from(list);\n  var compare = compareFuncs[type];\n  list.sort(compare);\n  return list;\n}\n`);\n  return [\n    sortFunctionName + '(' + list + ', ' +\n        '\"' + type + '\", ' + direction + ')',\n    Order.UNARY_POSTFIX\n  ];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.UNARY_POSTFIX);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  // XXX What should the operator precedence be for a `new`?\n  const code = 'new List.from(' + list + '.reversed)';\n  return [code, Order.UNARY_POSTFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for logic blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.logic\n\nimport {Order} from './dart_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block), generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? 'else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block), generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      Order.EQUALITY :\n      Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order =\n      (operator === '&&') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const order = Order.UNARY_PREFIX;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for loop blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.loops\n\nimport {Order} from './dart_generator.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  let repeats;\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (int ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.UNARY_PREFIX : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n        generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n        generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += 'num ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += '(' + increment + ').abs();\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  const code =\n      'for (var ' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for math blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.math\n\nimport {Order} from './dart_generator.js';\n\n\n// RESERVED WORDS: 'Math'\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  let order;\n  if (code === Infinity) {\n    code = 'double.infinity';\n    order = Order.UNARY_POSTFIX;\n  } else if (code === -Infinity) {\n    code = '-double.infinity';\n    order = Order.UNARY_PREFIX;\n  } else {\n    // -4.abs() returns -4 in generator due to strange order of operation choices.\n    // -4 is actually an operator and a number.  Reflect this in the order.\n    order = code < 0 ? Order.UNARY_PREFIX : Order.ATOMIC;\n  }\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [null, Order.NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in generator requires a special case since it has no operator.\n  if (!operator) {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.UNARY_POSTFIX];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_PREFIX) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in generator.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_PREFIX];\n  }\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  if (operator === 'ABS' || operator.substring(0, 5) === 'ROUND') {\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_POSTFIX) || '0';\n  } else if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = arg + '.abs()';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = arg + '.round()';\n      break;\n    case 'ROUNDUP':\n      code = arg + '.ceil()';\n      break;\n    case 'ROUNDDOWN':\n      code = arg + '.floor()';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.UNARY_POSTFIX];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.pi', Order.UNARY_POSTFIX],\n    'E': ['Math.e', Order.UNARY_POSTFIX],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['Math.sqrt2', Order.UNARY_POSTFIX],\n    'SQRT1_2': ['Math.sqrt1_2', Order.UNARY_POSTFIX],\n    'INFINITY': ['double.infinity', Order.ATOMIC],\n  };\n  const constant = block.getFieldValue('CONSTANT');\n  if (constant !== 'INFINITY') {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n  }\n  return CONSTANTS[constant];\n};\n\nexport function math_number_property(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.UNARY_POSTFIX],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    const functionName = generator.provideFunction_('math_isPrime', `\nbool ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is null, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    if (divisor === '0') {\n      return ['false', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = (' + varName + ' is num ? ' + varName + ' : 0) + ' +\n      argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM': {\n      const functionName = generator.provideFunction_('math_sum', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  num sumVal = 0;\n  myList.forEach((num entry) {sumVal += entry;});\n  return sumVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MIN': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_min', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  if (myList.isEmpty) return null;\n  num minVal = myList[0];\n  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});\n  return minVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MAX': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_max', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  if (myList.isEmpty) return null;\n  num maxVal = myList[0];\n  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});\n  return maxVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'AVERAGE': {\n      // This operation exclude null and values that are not int or float:\n      //   math_mean([null,null,\"aString\",1,9]) -> 5.0\n      const functionName = generator.provideFunction_('math_mean', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only.\n  List localList = new List.from(myList);\n  localList.removeWhere((a) => a is! num);\n  if (localList.isEmpty) return null;\n  num sumVal = 0;\n  localList.forEach((var entry) {sumVal += entry;});\n  return sumVal / localList.length;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      const functionName = generator.provideFunction_('math_median', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only, then sort, then return middle value\n  // or the average of two middle values if list has an even number of elements.\n  List localList = new List.from(myList);\n  localList.removeWhere((a) => a is! num);\n  if (localList.isEmpty) return null;\n  localList.sort((a, b) => (a - b));\n  int index = localList.length ~/ 2;\n  if (localList.length % 2 == 1) {\n    return localList[index];\n  } else {\n    return (localList[index - 1] + localList[index]) / 2;\n  }\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_('math_modes', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List values) {\n  List modes = [];\n  List counts = [];\n  int maxCount = 0;\n  for (int i = 0; i < values.length; i++) {\n    var value = values[i];\n    bool found = false;\n    int thisCount;\n    for (int j = 0; j < counts.length; j++) {\n      if (counts[j][0] == value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.add([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (int j = 0; j < counts.length; j++) {\n    if (counts[j][1] == maxCount) {\n        modes.add(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only.\n  List numbers = new List.from(myList);\n  numbers.removeWhere((a) => a is! num);\n  if (numbers.isEmpty) return null;\n  num n = numbers.length;\n  num sum = 0;\n  numbers.forEach((x) => sum += x);\n  num mean = sum / n;\n  num sumSquare = 0;\n  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));\n  return Math.sqrt(sumSquare / n);\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  int x = new Math.Random().nextInt(myList.length);\n  return myList[x];\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'double.infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_('math_random_int', `\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(num a, num b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    num c = a;\n    a = b;\n    b = c;\n  }\n  return new Math.Random().nextInt(b - a + 1) + a;\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  return ['new Math.Random().nextDouble()', Order.UNARY_POSTFIX];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.pi * 180',\n    Order.MULTIPLICATIVE\n  ];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.procedures\n\nimport {Order} from './dart_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const returnType = returnValue ? 'dynamic' : 'void';\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code = returnType + ' ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  let code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block), generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for text blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.texts\n\nimport {Order} from './dart_generator.js';\n\n\n// RESERVED WORDS: 'Html,Math'\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\n  return [code, order];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n          generator.valueToCode(block, 'ADD0', Order.UNARY_POSTFIX) || \"''\";\n      const code = element + '.toString()';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] =\n            generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join()';\n      return [code, Order.UNARY_POSTFIX];\n    }\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = [' + varName + ', ' + value + '].join();\\n';\n};\n\nexport function text_length(block, generator) {\n  // String or array length.\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  return [text + '.length', Order.UNARY_POSTFIX];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  return [text + '.isEmpty', Order.UNARY_POSTFIX];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const substring =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'FIRST' || where === 'FROM_START') ?\n      Order.UNARY_POSTFIX :\n      Order.NONE;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  let at;\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'FROM_START': {\n      at = generator.getAdjusted(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'LAST':\n      at = 1;\n      // Fall through.\n    case 'FROM_END': {\n      at = generator.getAdjusted(block, 'AT', 1);\n      const functionName = generator.provideFunction_('text_get_from_end', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, num x) {\n  return text[text.length - x];\n}\n`);\n      const code = functionName + '(' + text + ', ' + at + ')';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName =\n          generator.provideFunction_('text_random_letter', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text) {\n  int x = new Math.Random().nextInt(text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.UNARY_POSTFIX];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where2 === 'FROM_START');\n  const textOrder =\n      requiresLengthCall ? Order.UNARY_POSTFIX : Order.NONE;\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n\n    if (where2 === 'LAST') {\n      code = text + '.substring(' + at1 + ')';\n    } else {\n      code = text + '.substring(' + at1 + ', ' + at2 + ')';\n    }\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName =\n        generator.provideFunction_('text_get_substring', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, String where1, num at1, String where2, num at2) {\n  int getAt(String where, num at) {\n    if (where == 'FROM_END') {\n      at = text.length - 1 - at;\n    } else if (where == 'FIRST') {\n      at = 0;\n    } else if (where == 'LAST') {\n      at = text.length - 1;\n    } else if (where != 'FROM_START') {\n      throw 'Unhandled option (text_getSubstring).';\n    }\n    return at;\n  }\n  at1 = getAt(where1, at1);\n  at2 = getAt(where2, at2) + 1;\n  return text.substring(at1, at2);\n}\n`);\n    code = functionName + '(' + text + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? Order.UNARY_POSTFIX : Order.NONE;\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native generator function.  Define one.\n    const functionName = generator.provideFunction_('text_toTitleCase', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String str) {\n  RegExp exp = new RegExp(r'\\\\b');\n  List<String> list = str.split(exp);\n  final title = new StringBuffer();\n  for (String part in list) {\n    if (part.length > 0) {\n      title.write(part[0].toUpperCase());\n      if (part.length > 0) {\n        title.write(part.substring(1).toLowerCase());\n      }\n    }\n  }\n  return title.toString();\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.replaceFirst(new RegExp(r\\'^\\\\s+\\'), \\'\\')',\n    'RIGHT': '.replaceFirst(new RegExp(r\\'\\\\s+$\\'), \\'\\')',\n    'BOTH': '.trim()'\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  return [text + operator, Order.UNARY_POSTFIX];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ');\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  generator.definitions_['import_dart_html'] =\n      'import \\'dart:html\\' as Html;';\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'Html.window.prompt(' + msg + ', \\'\\')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    code = 'Math.parseDouble(' + code + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  // Substring count is not a native generator function.  Define one.\n  const functionName = generator.provideFunction_('text_count', `\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(String haystack, String needle) {\n  if (needle.length == 0) {\n    return haystack.length + 1;\n  }\n  int index = 0;\n  int count = 0;\n  while (index != -1) {\n    index = haystack.indexOf(needle, index);\n    if (index != -1) {\n      count++;\n     index += needle.length;\n    }\n  }\n  return count;\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function text_replace(block, generator) {\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replaceAll(' + from + ', ' + to + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\nexport function text_reverse(block, generator) {\n  // There isn't a sensible way to do this in generator. See:\n  // http://stackoverflow.com/a/21613700/3529104\n  // Implementing something is possibly better than not implementing anything?\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  const code = 'new String.fromCharCodes(' + text + '.runes.toList().reversed)';\n  return [code, Order.UNARY_PREFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for variable blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.variables\n\nimport {Order} from './dart_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName =\n      generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Dart for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\n// Former goog.module ID: Blockly.Dart\n\nimport * as Variables from '../../core/variables.js';\nimport * as stringUtils from '../../core/utils/string.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * https://dart.dev/guides/language/language-tour#operators\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,         // 0 \"\" ...\n  UNARY_POSTFIX: 1,  // expr++ expr-- () [] . ?.\n  UNARY_PREFIX: 2,   // -expr !expr ~expr ++expr --expr\n  MULTIPLICATIVE: 3, // * / % ~/\n  ADDITIVE: 4,       // + -\n  SHIFT: 5,          // << >>\n  BITWISE_AND: 6,    // &\n  BITWISE_XOR: 7,    // ^\n  BITWISE_OR: 8,     // |\n  RELATIONAL: 9,     // >= > <= < as is is!\n  EQUALITY: 10,      // == !=\n  LOGICAL_AND: 11,   // &&\n  LOGICAL_OR: 12,    // ||\n  IF_NULL: 13,       // ??\n  CONDITIONAL: 14,   // expr ? expr : expr\n  CASCADE: 15,       // ..\n  ASSIGNMENT: 16,    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\n  NONE: 99,          // (...)\n};\n\n/**\n * Dart code generator class.\n */\nexport class DartGenerator extends CodeGenerator {\n  constructor(name) {\n    super(name ?? 'Dart');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // https://www.dartlang.org/docs/spec/latest/dart-language-specification.pdf\n      // Section 16.1.1\n      'assert,break,case,catch,class,const,continue,default,do,else,enum,' +\n      'extends,false,final,finally,for,if,in,is,new,null,rethrow,return,' +\n      'super,switch,this,throw,true,try,var,void,while,with,' +\n      // https://api.dartlang.org/dart_core.html\n      'print,identityHashCode,identical,BidirectionalIterator,Comparable,' +\n      'double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,' +\n      'Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,' +\n      'Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,' +\n      'StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,' +\n      'ArgumentError,AssertionError,CastError,ConcurrentModificationError,' +\n      'CyclicInitializationError,Error,Exception,FallThroughError,' +\n      'FormatException,IntegerDivisionByZeroException,NoSuchMethodError,' +\n      'NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,' +\n      'StateError,TypeError,UnimplementedError,UnsupportedError'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init();\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(this.nameDB_.getName(devVarList[i],\n                                        NameType.DEVELOPER_VARIABLE));\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(this.nameDB_.getName(variables[i].getId(),\n                                        NameType.VARIABLE));\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] =\n          'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Indent every line.\n    if (code) {\n      code = this.prefixLines(code, this.INDENT);\n    }\n    code = 'main() {\\n' + code + '}';\n\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^import\\s/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Dart string, complete with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Dart string.\n   */\n  quote_(string) {\n    // Can't use goog.string.quote since $ must also be escaped.\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/\\$/g, '\\\\$')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Dart string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Dart string.\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(' + \\'\\\\n\\' + \\n');\n  }\n\n  /**\n   * Common tasks for generating Dart from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Dart code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} Dart code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        if (block.getProcedureDef) {\n          // Use documentation comment for function comments.\n          commentCode += this.prefixLines(comment + '\\n', '/// ');\n        } else {\n          commentCode += this.prefixLines(comment + '\\n', '// ');\n        }\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    /** @type {number} */\n    let outerOrder;\n    let innerOrder;\n    if (delta) {\n      outerOrder = this.ORDER_ADDITIVE;\n      innerOrder = this.ORDER_ADDITIVE;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_PREFIX;\n      innerOrder = this.ORDER_UNARY_PREFIX;\n    } else {\n      outerOrder = order;\n    }\n\n    /** @type {string|number} */\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.Dart.variablesDynamic\n\n\n// generator is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Dart for\n *     blocks.  This is the entrypoint for dart_compressed.js.\n * @suppress {extraRequire}\n */\n\n// Former goog.module ID: Blockly.Dart.all\n\nimport {DartGenerator} from './dart/dart_generator.js';\nimport * as colour from './dart/colour.js';\nimport * as lists from './dart/lists.js';\nimport * as logic from './dart/logic.js';\nimport * as loops from './dart/loops.js';\nimport * as math from './dart/math.js';\nimport * as procedures from './dart/procedures.js';\nimport * as text from './dart/text.js';\nimport * as variables from './dart/variables.js';\nimport * as variablesDynamic from './dart/variables_dynamic.js';\n\nexport * from './dart/dart_generator.js';\n\n/**\n * Dart code generator instance.\n * @type {!DartGenerator}\n */\nexport const dartGenerator = new DartGenerator();\n\n// Add reserved words.  This list should include all words mentioned\n// in RESERVED WORDS: comments in the imports above.\ndartGenerator.addReservedWords('Html,Math');\n\n// Install per-block-type generator functions:\nObject.assign(\n  dartGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"]}